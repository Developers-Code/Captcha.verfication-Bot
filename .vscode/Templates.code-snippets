{
	// Place your Captcha.verfication-Bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Discord.js > Slash Commands": {
		"prefix": "slash",
		"body": [
			"//====================[ Import Module ]====================\\\\\\",
			"const { SlashCommandBuilder, ChatInputCommandInteraction, PermissionFlagsBits, Client, EmbedBuilder } = require(\"discord.js\");",
			"",
			"//====================[ Settings ]====================\\\\\\",
			"const setting = require(\"./../../Src/Settings/setting.json\");",
			"const embed = require(\"./../../Src/Settings/embed.json\");",
			"const emoji = require(\"./../../Src/Settings/emoji.json\");",
			"",
			"//====================[ Functions ]====================\\\\\\",
			"",
			"const { errorCmdLogs } = require(\"./../../Src/Functions/errorCmdLogs.js\");",
			"",
			"//====================[ Others ]====================\\\\\\",
			"",
			"//====================[ Code ]====================\\\\\\",
			"",
			"module.exports = {",
			"    category: \"${1:label}\",",
			"    cooldown: ${2:label},",
			"    devOnly: false,",
			"    guildOnly: false,",
			"    voiceOnly: false,",
			"    toggleOffCmd: false,",
			"    maintenanceCmd: false,",
			"",
			"    data: new SlashCommandBuilder()",
			"        .setName(\"${3:label}\")",
			"        .setDescription(\"${4:label}\")",
			"        .setDefaultMemberPermission(PermissionFlagsBits.UseApplicationCommands)",
			"        .setDMPermission(false),",
			"",
			"    async execute(client, interaction) {",
			"        try {",
			"",
			"        } catch (error) {",
			"            errorCmdLogs(client, interaction, error);",
			"        };",
			"    }",
			"}"

		]
	},
	"Discord.js > Handler": {
		"prefix": "handler",
		"body": [
			"//====================[ Import Module ]====================\\\\\\",
			"const { ChatInputCommandInteraction, Client, EmbedBuilder } = require(\"discord.js\");",
			"",
			"//====================[ settings ]====================\\\\\\",
			"const settings = require(\"./../Settings/settings.json\");",
			"const connections = require(\"./../Settings/connections.json\");",
			"const handlers = require(\"./../Settings/connections.json\");",
			"const webhook = require(\"./../Settings/webhook.json\");",
			
			"//====================[ Functions ]====================\\\\\\",
			"const errorCmdLogs = require(\"./../Functions/errorCmdLogs\")",
			"",
			"//====================[ Other ]====================\\\\\\",
			"const color = require(\"colors\")",
			"",
			"//====================[ Code ]====================\\\\\\",
			"",
			"module.exports = {",
			"    name: \"checkEnvironment\",",
			"    once: true,",
			"",
			"    async execute(client) {",
			"        try {",
			"",
			"        } catch (error) {",
			"            errorCmdLogs(client, interaction, error)",
			"        }",
			"    }",
			"}"
		]
	}
}